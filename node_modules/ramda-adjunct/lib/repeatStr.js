'use strict';

exports.__esModule = true;
exports.repeatStrInvoker = exports.repeatStrPolyfill = undefined;

var _ramda = /*#__PURE__*/require('ramda');

var _String = /*#__PURE__*/require('./internal/polyfills/String.repeat');

var _String2 = /*#__PURE__*/_interopRequireDefault(_String);

var _isFunction = /*#__PURE__*/require('./isFunction');

var _isFunction2 = /*#__PURE__*/_interopRequireDefault(_isFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var repeatStrPolyfill = /*#__PURE__*/exports.repeatStrPolyfill = (0, _ramda.curry)(_String2.default);

var repeatStrInvoker = /*#__PURE__*/exports.repeatStrInvoker = (0, _ramda.flip)( /*#__PURE__*/(0, _ramda.invoker)(1, 'repeat'));

/**
 * Constructs and returns a new string which contains the specified
 * number of copies of the string on which it was called, concatenated together.
 *
 * @func repeatStr
 * @memberOf RA
 * @since {@link https://char0n.github.io/ramda-adjunct/2.11.0|v2.11.0}
 * @category List
 * @sig String -> Number -> String
 * @param {string} value String value to be repeated
 * @param {number} count An integer between 0 and +∞: [0, +∞), indicating the number of times to repeat the string in the newly-created string that is to be returned
 * @return {string} A new string containing the specified number of copies of the given string
 * @example
 *
 * RA.repeatStr('a', 3); //=> 'aaa'
 */
var repeatStr = /*#__PURE__*/(0, _isFunction2.default)(String.prototype.repeat) ? repeatStrInvoker : repeatStrPolyfill;

exports.default = repeatStr;